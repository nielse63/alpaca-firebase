#!/usr/bin/env node
const fs = require('fs-extra');
const fg = require('fast-glob');
const path = require('path');
const dependencyTree = require('dependency-tree');

const root = path.resolve(__dirname, '..');
let dependenciesMap = {};

const getEntryFiles = async () => {
  const files = await fg('packages/*/index.js');
  return files;
};

const readDependencies = (file) => {
  const filename = path.resolve(root, file);
  const directory = path.dirname(filename);
  const tree = dependencyTree
    .toList({
      filename,
      directory,
      nodeModulesConfig: {
        entry: 'main',
      },
    })
    .filter((item) => item.includes('@alpaca-firebase/'))
    .map((item) => {
      const dirname = path.basename(path.dirname(item));
      return `@alpaca-firebase/${dirname}`;
    });
  tree.forEach((item) => {
    const itemDepCount = dependenciesMap[item];
    dependenciesMap[item] = itemDepCount + 1;
  });
};

const deps = async () => {
  const files = await getEntryFiles();
  files.forEach((file) => {
    const pkgName = '@alpaca-firebase/' + file.split('/')[1];
    dependenciesMap[pkgName] = 0;
  });
  files.forEach(readDependencies);
  const sortedDependencies = Object.keys(dependenciesMap).sort(
    (a, b) => dependenciesMap[b] - dependenciesMap[a]
  );
  const packagePaths = sortedDependencies.map((dep) => {
    return `./packages/${dep.split('/')[1]}`;
  });
  const pkg = await fs.readJson(path.resolve(root, 'package.json'));
  pkg.workspaces = [...packagePaths, './functions'];
  await fs.writeJson(path.resolve(root, 'package.json'), pkg, {
    spaces: 2,
  });
};

deps().catch(console.error);
