#!/usr/bin/env node
const fs = require('fs-extra');
const path = require('path');
const fg = require('fast-glob');
const { spawnSync } = require('child_process');

// remove existing type declarations
const removeTypeDeclaration = async () => {
  console.log('removing existing type declarations...');
  const typeFiles = await fg(
    [
      'packages/**/*.d.ts',
      'functions/**/*.d.ts',
      'packages/**/*.d.ts.map',
      'functions/**/*.d.ts.map',
      '**/types/**',
    ],
    {
      ignore: ['**/node_modules/**'],
      onlyFiles: false,
      onlyDirectories: false,
    }
  );

  for (const file of typeFiles) {
    console.log(`Removing ${file}`);
    await fs.remove(file);
  }
};

const runBuildCommand = () => {
  console.log('running build command...');
  const result = spawnSync(
    'npx',
    ['tsc', '--allowJs', '--emitDeclarationOnly'],
    {
      stdio: 'inherit',
    }
  );

  if (result.error) {
    console.error(result.error);
    process.exit(1);
  }

  if (result.status !== 0) {
    console.error('Build failed');
    process.exit(1);
  }
};

// const moveTypeFiles = async () => {
//   const typeFiles = await fg(['types/**/*.d.ts']);
//   const promises = typeFiles.map(async (file) => {
//     const basename = path.basename(file);
//     const dest = file
//       .replace('types/', '')
//       .replace(basename, `types/${basename}`);
//     console.log(`Moving ${file} to ${dest}`);
//     await fs.ensureDir(path.dirname(dest));
//     await fs.move(file, dest);
//   });
//   await Promise.all(promises);
// };

const updatePackageJsonFiles = async () => {
  console.log('updating package.json files...');
  const pkgFiles = await fg(
    ['./functions/**/package.json', './packages/**/package.json'],
    {
      ignore: ['**/node_modules/**'],
    }
  );
  const promises = pkgFiles.map(async (file) => {
    const pkg = await fs.readJson(file);
    if (pkg.types === './index.d.ts') return;
    pkg.types = './index.d.ts';
    await fs.writeJson(file, pkg, { spaces: 2 });
    console.log(`Updated ${file}`);
  });
  await Promise.all(promises);
};

// const cleanup = async () => {
//   await fs.remove('types');
// };

const build = async () => {
  await removeTypeDeclaration();
  runBuildCommand();
  // await moveTypeFiles();
  await updatePackageJsonFiles();
  // await cleanup();
};

build().catch(console.error);
