#!/usr/bin/env bash
set -e

# vars
root=$(realpath "$(dirname  "$(dirname "$0")")")
functions=$(realpath "$root/functions")

# arguments
increment="patch";
force=
dry_run=false
while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
  --patch )
    increment="patch"
    ;;
  --minor )
    increment="minor"
    ;;
  --major )
    increment="major"
    ;;
  --force )
    force=true
    ;;
  --dry-ryn )
    dry_run=true
    ;;
esac; shift; done
if [[ "$1" == '--' ]]; then shift; fi

# Check if there are uncommitted changes
if [[ ! $force && -n "$(git status --porcelain)" ]]; then
  echo "Uncommitted changes - exiting";
  exit 0;
fi

# Check if the current branch is main
branch=$(git branch --show-current)
if [[ ! $force && "$branch" != "main" ]]; then
  echo "Not on main branch - exiting";
  exit 0;
fi

# pre-checks
npm run lint
npm test
npm run build

# release
npm version $increment --workspaces --no-git-tag-version --include-workspace-root
npm publish --access public --workspaces --dry-run=$dry_run --include-workspace-root

# get prev/new version
prev_version=$(git describe --tags --abbrev=0)
new_version=$(npm show . version)
if [ "${new_version::1}" != "v" ]; then
  new_version="v${new_version}"
fi

# update ./functions
cd "$functions"
npm update --save
npm version "$new_version" --no-git-tag-version
npx jest ./functions
cd "$root"

# commit & push changes
git add . --update
git commit -m "Release: $new_version"
git tag --annotate --message="Release: $new_version" "$new_version"
git push --follow-tags --set-upstream origin "$branch"

# create github release
# changelog=$(git log --pretty=format:"* %s (%h)" "$prev_version".."$new_version")
gh release create "$new_version" \
  --generate-notes \
  --verify-tag \
  --latest \
  --title "$new_version" \
  --notes-start-tag "$prev_version"

# deploy function
npm run deploy -- -m "Release: $new_version"
